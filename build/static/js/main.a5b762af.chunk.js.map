{"version":3,"sources":["movieCard.js","apiKey.js","searchMovies.js","App.js","index.js"],"names":["MovieCard","movie","channel","media_type","className","href","id","target","src","poster_path","alt","title","name","release_date","first_air_date","vote_average","overview","apiKey","SearchMovies","useState","query","setQuery","moviesTvShows","setMoviesTvShows","filterdMoviesTvShow","setFilterdMoviesTvShow","sortBy","setSortBy","channelAt","setChannelAt","setGenresIds","selectedGenre","searchMovies","map","e","genre_ids","join","split","a","preventDefault","url","test","parseInt","genreUrl","fetch","res","json","data","console","log","results","filter","error","genres","useEffect","sortedMovies","sort","b","Date","localeCompare","selectedChannel","onSubmit","type","placeholder","value","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5b762af.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function MovieCard({ movie }) {\n    const channel = movie.media_type === \"movie\" ? \"movie\" : \"tv\"\n    return (\n        <div className=\"card\"  >\n            <a href={`https://www.themoviedb.org/${channel}/${movie.id}`} target=\"example\">\n                <img className=\"card--image\"\n                    src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n                    alt={movie.title + ' poster'}\n                />\n            </a>\n            <div className=\"card--content\">\n                <h3 className=\"card--title\">{movie.title || movie.name}</h3>\n                <p><small>RELEASE DATE: {movie.release_date || movie.first_air_date}</small></p>\n                <p><small>RATING: {movie.vote_average}</small></p>\n                <p className=\"card--desc\">{movie.overview}</p>\n            </div>\n        </div>\n    )\n}","export const apiKey = \"2a34a2bbb57d7b6a8dee0f7f4848dc06\"","import React, { useState, useEffect } from \"react\"\nimport MovieCard from './movieCard.js'\nimport FilterdGenres from './filterdGenres'\nimport { apiKey } from './apiKey'\n\nexport default function SearchMovies() {\n\n    //states- input query, movies\n    const [query, setQuery] = useState('');\n    //create the state for movies, and update that state appropriate\n    const [moviesTvShows, setMoviesTvShows] = useState([]);\n    const [filterdMoviesTvShow, setFilterdMoviesTvShow] = useState([])\n    const [sortBy, setSortBy] = useState();\n    const [channelAt, setChannelAt] = useState();\n    const [genreIds, setGenresIds] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState([]);\n\n    const usedGenres = [...filterdMoviesTvShow.map(e => (e.genre_ids))].join().split(',')\n\n    const searchMovies = async (e) => {\n        e.preventDefault();\n\n        const url = query === \"popular\" ? `https://api.themoviedb.org/3/trending/all/week?api_key=${apiKey}`\n            : /\\d{4}/.test(parseInt(query)) ? `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&primary_release_year=${query}`\n                : `https://api.themoviedb.org/3/search/multi?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`;\n        const genreUrl = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}&language=en-US`\n        try {\n            const res = await fetch(url);\n            const data = await res.json();\n            console.log(data.results)\n            setMoviesTvShows(data.results.filter(movie => movie.poster_path))\n            setFilterdMoviesTvShow(data.results.filter(movie => movie.poster_path))\n        } catch (err) {\n            console.error(err);\n        }\n\n        try {\n            const res = await fetch(genreUrl);\n            const data = await res.json();\n            setGenresIds(data.genres)\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    useEffect(() => {\n        const sortedMovies = sortBy === \"High-Low\" ? [...moviesTvShows].sort((a, b) => b.vote_average - a.vote_average)\n            : sortBy === \"Low-High\" ? [...moviesTvShows].sort((a, b) => a.vote_average - b.vote_average)\n                : sortBy === \"NewestFirst\" ? [...moviesTvShows].sort((a, b) => new Date(b.release_date || b.first_air_date) - new Date(a.release_date || a.first_air_date))\n                    : sortBy === \"OldestFirst\" ? [...moviesTvShows].sort((a, b) => new Date(a.release_date || a.first_air_date) - new Date(b.release_date || b.first_air_date))\n                        : [...moviesTvShows].sort((a, b) => (a.title || a.name).localeCompare(b.title || b.name))\n        setFilterdMoviesTvShow(sortedMovies)\n    }, [sortBy])\n\n    useEffect(() => {\n        const selectedChannel = channelAt === \"movies\" ? [...moviesTvShows].filter(movie => movie.media_type === \"movie\")\n            : channelAt === \"tvShows\" ? [...moviesTvShows].filter(movie => movie.media_type === \"tv\")\n                : [...moviesTvShows]\n        setFilterdMoviesTvShow(selectedChannel)\n    }, [channelAt])\n\n    useEffect(() => {\n        // const filterdByGenre = [...moviesTvShows].filter(e => (selectedGenre.indexOf(e.id.toString()) > -1))\n        // console.log(filterdByGenre)\n        // setFilterdMoviesTvShow(filterdByGenre)\n    }, [selectedGenre])\n    return (\n        <>\n            {/* Searchform  */}\n            <div className=\"searchForm\">\n                <form className=\"movieName\" onSubmit={searchMovies}>\n                    <input className=\"input\" type=\"text\" name=\"query\"\n                        placeholder=\"Search for a movie or tv show\"\n                        value={query} onChange={(e) => setQuery(e.target.value)}\n                    />\n                    <button className=\"button\" type=\"submit\">Search</button>\n                </form>\n            </div>\n            {/* Adjust Search  */}\n            <div className=\"adjustSearch\">\n                {/* Sort Search */}\n                <form id=\"sortForm\">\n                    <label className=\"label\">Sort By:</label>\n                    <select className=\"input\" id=\"sortSelect\" onChange={(e) => setSortBy(e.target.value)}>\n                        <option >---</option>\n                        <option value=\"High-Low\">High-Low</option>\n                        <option value=\"Low-High\">Low-High</option>\n                        <option value=\"Title\">Title</option>\n                        <option value=\"NewestFirst\">Newest first</option>\n                        <option value=\"OldestFirst\">Oldest first</option>\n                    </select>\n                </form>\n                {/* Filter Search  */}\n                <form className=\"selectSearch\">\n                    <label className=\"label\" >Filter</label>\n                    <select className=\"input\" id=\"channelFilter\"\n                        onChange={(e) => setChannelAt(e.target.value)}\n                    >\n                        <option value=\"\">---</option>\n                        <option value=\"movies\">Movies</option>\n                        <option value=\"tvShows\">TV Shows</option>\n                    </select>\n                </form>\n                {/* <form className=\"selectSearch\">\n                    <label className=\"label\">Genre</label>\n                    <select className=\"input\" id=\"genreFilter\"\n                        onChange={(e) => setSelectedGenre(e.target.value)}\n                    >\n                        <option value=\"\">---</option>\n                        {genreIds.filter(e => usedGenres.indexOf(e.id.toString()) > -1).map(genre => (\n                            <FilterdGenres genreId={genre} key={genre.id} />\n                        ))}\n                    </select>\n                </form> */}\n            </div>\n            {/* Display Search */}\n            <div className=\"card-list\">\n                {filterdMoviesTvShow.map(movie => (\n                    <MovieCard movie={movie} key={movie.id} />\n                ))}\n            </div>\n        </>\n    )\n}\n","// import React from 'react'\n// import ReactDOM from 'react-dom'\nimport SearchMovies from \"./searchMovies\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">My Movie Search</h1>\n      <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}